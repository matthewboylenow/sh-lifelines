// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  username          String?   @unique
  password          String
  displayName       String?
  role              UserRole  @default(MEMBER)
  isActive          Boolean   @default(true)
  resetToken        String?
  resetTokenExpiry  DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relationships
  ledLifeLines        LifeLine[]        @relation("LifeLineLeader")
  formationRequests   FormationRequest[]
  supportTickets     SupportTicket[]
  votes              FormationVote[]
  formationComments  FormationComment[]
  ticketResponses    TicketResponse[]
  
  @@map("users")
}

enum UserRole {
  ADMIN
  FORMATION_SUPPORT_TEAM
  LIFELINE_LEADER
  MEMBER
}

// LifeLine (Small Groups)
model LifeLine {
  id                  String    @id @default(cuid())
  title               String
  subtitle            String?
  description         String?   @db.Text
  status              LifeLineStatus @default(DRAFT)
  isVisible           Boolean   @default(true)
  
  // Group Details
  groupLeader         String
  leaderEmail         String
  location            String?
  agesStages          String[]  // Array of selected options
  meetingFrequency    MeetingFrequency?
  dayOfWeek           DayOfWeek?
  groupType           GroupType?
  meetingTime         String?
  maxParticipants     Int?
  duration            String?
  cost                String?
  childcare           Boolean   @default(false)
  
  // Media
  imageUrl            String?
  imageAlt            String?
  imageAttribution    String?  // For Unsplash attribution
  videoUrl            String?
  
  // Timestamps
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Relationships
  leaderId            String
  leader              User      @relation("LifeLineLeader", fields: [leaderId], references: [id])
  inquiries           Inquiry[]
  formationRequestId  String?   @unique
  formationRequest    FormationRequest? @relation("CreatedLifeLine", fields: [formationRequestId], references: [id])
  
  @@map("lifelines")
}

enum LifeLineStatus {
  DRAFT
  PUBLISHED
  FULL
  ARCHIVED
}

enum MeetingFrequency {
  WEEKLY
  MONTHLY
  SEASONALLY
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  VARIES
}

enum GroupType {
  SOCIAL
  ACTIVITY
  SCRIPTURE_BASED
  SUNDAY_BASED
}

// Formation Request System
model FormationRequest {
  id                  String    @id @default(cuid())
  title               String
  description         String?   @db.Text
  status              FormationStatus @default(SUBMITTED)
  
  // Form Data from Typeform/Native Form
  groupLeader         String
  leaderEmail         String
  cellPhone           String?
  agesStages          String?
  groupType           GroupType?
  meetingFrequency    MeetingFrequency?
  dayOfWeek           DayOfWeek?
  meetingTime         String?
  
  // System Fields
  autoApprovalScheduled DateTime?
  lifeLineCreated     Boolean   @default(false)
  
  // Timestamps
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Relationships
  submitterId         String?
  submitter           User?     @relation(fields: [submitterId], references: [id])
  votes               FormationVote[]
  comments            FormationComment[]
  createdLifeLine     LifeLine? @relation("CreatedLifeLine")
  
  @@map("formation_requests")
}

enum FormationStatus {
  SUBMITTED
  APPROVED
  REJECTED
  ARCHIVED
}

model FormationVote {
  id          String      @id @default(cuid())
  vote        VoteType
  comment     String?     @db.Text
  createdAt   DateTime    @default(now())
  
  // Relationships
  requestId   String
  request     FormationRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  
  @@unique([requestId, userId]) // One vote per user per request
  @@map("formation_votes")
}

enum VoteType {
  APPROVE
  PASS
  OBJECT
  DISCUSS
}

model FormationComment {
  id          String    @id @default(cuid())
  content     String    @db.Text
  createdAt   DateTime  @default(now())
  
  // Relationships
  requestId   String
  request     FormationRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  
  @@map("formation_comments")
}

// Inquiry System
model Inquiry {
  id              String        @id @default(cuid())
  personName      String
  personEmail     String?
  personPhone     String?
  message         String?       @db.Text
  status          InquiryStatus @default(UNDECIDED)
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relationships
  lifeLineId      String
  lifeLine        LifeLine      @relation(fields: [lifeLineId], references: [id])
  
  @@map("inquiries")
}

enum InquiryStatus {
  UNDECIDED
  JOINED
  NOT_JOINED
}

// Support Ticket System
model SupportTicket {
  id              String        @id @default(cuid())
  referenceNumber String        @unique
  subject         String
  description     String        @db.Text
  status          TicketStatus  @default(PENDING_REVIEW)
  priority        TicketPriority @default(MEDIUM)
  ticketType      String?
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  resolvedAt      DateTime?
  
  // Relationships
  requesterId     String
  requester       User          @relation(fields: [requesterId], references: [id])
  responses       TicketResponse[]
  
  @@map("support_tickets")
}

enum TicketStatus {
  PENDING_REVIEW
  IN_PROGRESS
  RESOLVED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
}

model TicketResponse {
  id            String        @id @default(cuid())
  content       String        @db.Text
  isFromSupport Boolean       @default(false)
  createdAt     DateTime      @default(now())
  
  // Relationships
  ticketId      String
  ticket        SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  authorId      String
  author        User          @relation(fields: [authorId], references: [id])
  
  @@map("ticket_responses")
}

// Resource Management
model Resource {
  id            String        @id @default(cuid())
  title         String
  description   String?       @db.Text
  websiteUrl    String?
  resourceType  ResourceType
  isActive      Boolean       @default(true)
  
  // File Management
  fileUrl       String?
  fileName      String?
  fileSize      Int?
  
  // Timestamps
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@map("resources")
}

enum ResourceType {
  BIBLE_STUDY_REFLECTIONS
  SERIES_PROGRAMS
  LEADER_FAITH_FORMATION
}